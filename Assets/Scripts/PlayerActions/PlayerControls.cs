//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/PlayerActions/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""TankActions"",
            ""id"": ""f483be01-d321-4aa0-b35d-5148ee0f2843"",
            ""actions"": [
                {
                    ""name"": ""Fire"",
                    ""type"": ""Button"",
                    ""id"": ""1568520c-9262-4d66-aaa1-3981119c20ce"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""2e1f9f41-6e5c-4926-98c9-41c56c4796a9"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Reload Game"",
                    ""type"": ""Button"",
                    ""id"": ""86a9fb4b-3906-451b-89fd-be8ee060a061"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""99d098ea-05d7-4c8e-b57d-3ea02ce8c903"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""626a389e-445a-4212-b3e5-d4f7a852794d"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""855e8f09-5d9d-4dcd-9bf3-97e84ebcc4bc"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""168277e5-d7b9-4ca7-abf4-d76f215b2202"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""c2ced853-b7e7-41ff-a282-15a33a3b4ae2"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""dbaae7db-0502-49d6-b413-c7e2a797f7c6"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""622e8ac3-78f3-450f-bfc7-addf09fa0b8a"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""3348f9a9-d965-4bfd-967c-6c7d860486ff"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reload Game"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // TankActions
        m_TankActions = asset.FindActionMap("TankActions", throwIfNotFound: true);
        m_TankActions_Fire = m_TankActions.FindAction("Fire", throwIfNotFound: true);
        m_TankActions_Movement = m_TankActions.FindAction("Movement", throwIfNotFound: true);
        m_TankActions_ReloadGame = m_TankActions.FindAction("Reload Game", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // TankActions
    private readonly InputActionMap m_TankActions;
    private ITankActionsActions m_TankActionsActionsCallbackInterface;
    private readonly InputAction m_TankActions_Fire;
    private readonly InputAction m_TankActions_Movement;
    private readonly InputAction m_TankActions_ReloadGame;
    public struct TankActionsActions
    {
        private @PlayerControls m_Wrapper;
        public TankActionsActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Fire => m_Wrapper.m_TankActions_Fire;
        public InputAction @Movement => m_Wrapper.m_TankActions_Movement;
        public InputAction @ReloadGame => m_Wrapper.m_TankActions_ReloadGame;
        public InputActionMap Get() { return m_Wrapper.m_TankActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TankActionsActions set) { return set.Get(); }
        public void SetCallbacks(ITankActionsActions instance)
        {
            if (m_Wrapper.m_TankActionsActionsCallbackInterface != null)
            {
                @Fire.started -= m_Wrapper.m_TankActionsActionsCallbackInterface.OnFire;
                @Fire.performed -= m_Wrapper.m_TankActionsActionsCallbackInterface.OnFire;
                @Fire.canceled -= m_Wrapper.m_TankActionsActionsCallbackInterface.OnFire;
                @Movement.started -= m_Wrapper.m_TankActionsActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_TankActionsActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_TankActionsActionsCallbackInterface.OnMovement;
                @ReloadGame.started -= m_Wrapper.m_TankActionsActionsCallbackInterface.OnReloadGame;
                @ReloadGame.performed -= m_Wrapper.m_TankActionsActionsCallbackInterface.OnReloadGame;
                @ReloadGame.canceled -= m_Wrapper.m_TankActionsActionsCallbackInterface.OnReloadGame;
            }
            m_Wrapper.m_TankActionsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Fire.started += instance.OnFire;
                @Fire.performed += instance.OnFire;
                @Fire.canceled += instance.OnFire;
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @ReloadGame.started += instance.OnReloadGame;
                @ReloadGame.performed += instance.OnReloadGame;
                @ReloadGame.canceled += instance.OnReloadGame;
            }
        }
    }
    public TankActionsActions @TankActions => new TankActionsActions(this);
    public interface ITankActionsActions
    {
        void OnFire(InputAction.CallbackContext context);
        void OnMovement(InputAction.CallbackContext context);
        void OnReloadGame(InputAction.CallbackContext context);
    }
}
